package cop5556fa18;

import static org.junit.Assert.assertEquals;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa18.PLPCodeGenUtils.DynamicClassLoader;
import cop5556fa18.PLPTypeChecker.SemanticException;
import cop5556fa18.PLPAST.Program;

public class PLPCodeGenTest {	
	//determines whether show prints anything
		static boolean doPrint = true;
		
		static void show(Object s) {
			if (doPrint) {
				System.out.println(s);
			}
		}

		//determines whether a classfile is created
		static boolean doCreateFile = false;
		
		@Rule
		public ExpectedException thrown = ExpectedException.none();
		

		//values passed to CodeGenerator constructor to control grading and debugging output
		private boolean devel = true; //if true, print devel output
		private boolean grade = true; //if true, print grade output
		
		/**
		 * Generates bytecode for given input.
		 * Throws exceptions for Lexical, Syntax, and Type checking errors
		 * 
		 * @param input   String containing source code
		 * @return        Generated bytecode
		 * @throws Exception
		 */
		byte[] genCode(String input) throws Exception {
			
			//scan, parse, and type check
			PLPScanner scanner = new PLPScanner(input);
			show(input);
			scanner.scan();
			PLPParser parser = new PLPParser(scanner);
			Program program = parser.parse();
			PLPTypeChecker v = new PLPTypeChecker();
			program.visit(v, null);
//			show(program);  //It may be useful useful to show this here if code generation fails

			//generate code
			PLPCodeGen cv = new PLPCodeGen(null, devel, grade);
			byte[] bytecode = (byte[]) program.visit(cv, null);
			show(program); //doing it here shows the values filled in during code gen
			//display the generated bytecode
			show(PLPCodeGenUtils.bytecodeToString(bytecode));
			
			//write byte code to file 
			if (doCreateFile) {
				String name = ((Program) program).name;
				String classFileName = "bin/" + name + ".class";
				OutputStream output = new FileOutputStream(classFileName);
				output.write(bytecode);
				output.close();
				System.out.println("wrote classfile to " + classFileName);
			}
			
			//return generated classfile as byte array
			return bytecode;
		}
		
		/**
		 * Run main method in given class
		 * 
		 * @param className    
		 * @param bytecode    
		 * @param commandLineArgs  String array containing command line arguments, empty array if none
		 * @throws + 
		 * @throws Throwable 
		 */
		void runCode(String className, byte[] bytecode) throws Exception  {
			PLPRuntimeLog.initLog(); //initialize log used for grading.
			DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
			Class<?> testClass = loader.define(className, bytecode);
			String[] commandLineArgs = {};
			@SuppressWarnings("rawtypes")
			Class[] argTypes = {commandLineArgs.getClass()};
			Method m = testClass.getMethod("main", argTypes );
			show("Output from " + m + ":");  //print name of method to be executed
			Object passedArgs[] = {commandLineArgs};//create array containing params, in this case a single array.
			//show(passedArgs);
			try {
			m.invoke(null, passedArgs);	
			}
			catch (Exception e) {
				Throwable cause = e.getCause();
				if (cause instanceof Exception) {
					Exception ec = (Exception) e.getCause();
					throw ec;
				}
				throw  e;
			}
		}
		
		/**
		 * Since we are not doing any optimization, the compiler will 
		 * still create a class with a main method and the JUnit test will
		 * execute it.  
		 * 
		 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
		 * 
		 * @throws Exception
		 */
		@Test
		public void emptyProg() throws Exception {
			String prog = "emptyProg";	
			String input = prog + "{}";
			byte[] bytecode = genCode(input);
			runCode(prog, bytecode);
			show("Log:\n "+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{print 3;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void floatLitShow() throws Exception {
			String prog = "floatLit";
			String input = prog + "{print 3.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void booleanLitShow() throws Exception {
			String prog = "booleanLit";
			String input = prog + "{print true;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declaration0() throws Exception {
			String prog = "intLit";
			String input = prog + "{int a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declaration1() throws Exception {
			String prog = "floatLit";
			String input = prog + "{float a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declaration2() throws Exception {
			String prog = "booleanLit";
			String input = prog + "{boolean a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign0() throws Exception {
			String prog = "booleanLit";
			String input = prog + "{int a; a = 2;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign1() throws Exception {
			String prog = "floatLit";
			String input = prog + "{float a; a = 2.0; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign2() throws Exception {
			String prog = "booleanLit";
			String input = prog + "{boolean a; a = true;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign6() throws Exception {
			String prog = "intLit";
			String input = prog + "{int a; int b; b = 5; a = b + 5; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;10;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign7() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; int b; b = 5; a = b + 5.0; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;10.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign8() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.0; a = b + 5;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign9() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.0; a = b + 5.0;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign10() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.0; a = b - 6.0; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-1.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign11() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{boolean a; boolean b; b = true; a = b & false;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign12() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{int a; int b; b = 10; a = b % 3;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign13() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{int a; int b; b = 10; a = b | 3;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign14() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{boolean a; boolean b; b = true; a = b | false;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign15() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{int a; int b; b = 5; a = b ** 2; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;25;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign16() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.5; a = b ** 2; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;30.25;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign17() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.5; a = b ** 2.1; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;35.872494;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign18() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; float b; b = 5.2; a = 2 ** b; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;36.758343;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void declareAndAssign19() throws Exception {
			String prog = "intFloatLit";
			String input = prog + "{float a; int b; b = 7; a = b / 2.0; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3.5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void sleep0() throws Exception {
			String prog = "sleepProgram";
			String input = prog + "{sleep 1000;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionUnary0() throws Exception {
			String prog = "unary";
			String input = prog + "{int a; a = !1; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionUnary1() throws Exception {
			String prog = "unary1";
			String input = prog + "{boolean a; a = !true; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionUnary2() throws Exception {
			String prog = "unary1";
			String input = prog + "{int a; int b; b = 5; a = -b; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionFunctionAppWithExpressionArg0() throws Exception {
			String prog = "predef";
			String input = prog + "{float a; a = 1.570796; print atan(a);} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.0038847;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionFunctionAppWithExpressionArg2() throws Exception {
			String prog = "predef";
			String input = prog + "{float a; a = 180.0; print sin(a);} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-0.80115265;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionFunctionAppWithExpressionArg3() throws Exception {
			String prog = "predef";
			String input = prog + "{float a; a = -180.0; print abs(a);} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;180.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionFunctionAppWithExpressionArg4() throws Exception {
			String prog = "predef";
			String input = prog + "{float a; a = 2.718282; print log(a);} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void lhsIdent1() throws Exception {
			String prog = "predef";
			String input = prog + "{int foo; int a; a = 5; foo = a; print foo;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expressionIdent3() throws Exception {
			String prog = "sif";
			String input = prog + "{int a; a = 5; print a;} ";	
			System.out.println(input);
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void failTest159() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-2;0;-1;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		public void failTest2() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest4() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest5() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest6() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest7() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest8() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest9() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}

		public void failTest10() throws Exception {
			String prog = "printn";
			String input = prog+"{print !1; print !-1; print !0; print !-2;} ";    
			byte[] bytecode = genCode(input);        
			runCode(prog, bytecode);    
			show("Log:\n"+PLPRuntimeLog.globalLog);
		}
		
		@Test
		public void expressionBinaryEQ_int() throws Exception {
			String prog = "sif";
			String input = prog + "{print 1 == 1;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryEQ_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true == false;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryEQ_float0() throws Exception {
			String prog = "sif";
			String input = prog + "{print 1.0 == 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}


		// to be done
		@Test
		public void expressionBinaryEQ_float() throws Exception {
			String prog = "sif";
			String input = prog + "{float a; a = 5.0; float b; b= 5.0; boolean status; status = (a==b); print status;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}


		@Test
		public void expressionBinaryNEQ_int() throws Exception {
			String prog = "sif";
			String input = prog + "{print 1 != 2;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryNEQ_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true != true;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryNEQ_float() throws Exception {
			String prog = "sif";
			String input = prog + "{print 1.0 != 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGT_int() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2 > 1;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGT_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true > false;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGT_float() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2.0 > 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGE_int() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2 >= 1;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGE_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true >= false;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryGE_float() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2.0 >= 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLE_int() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2 <= 1;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLE_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true <= false;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLE_float() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2.0 <= 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLT_int() throws Exception {
			String prog = "sif";
			String input = prog + "{int a; a = 2; boolean b; b = a < 1; print b;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLT_boolean() throws Exception {
			String prog = "sif";
			String input = prog + "{print true < false;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void expressionBinaryLT_float() throws Exception {
			String prog = "sif";
			String input = prog + "{print 2.0 < 1.0;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void statementIf0() throws Exception {
			String prog = "sif";
			String input = prog + "{int a; a = 5; int b; b= 5; if(a == b){ print 2;};} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

		@Test
		public void statementWhile0() throws Exception {
			String prog = "swhile";
			String input = prog + "{int a; a = 5; while(a >= 0){ print a; a = a - 1; }; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;5;4;3;2;1;0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void expression_binary_Test2() throws Exception {
			String prog = "expBin";
			String input = prog + "{int a = 3; int b = 5; int c;  c = a+b;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests() throws Exception {
			String prog = "expBin";
			String input = prog + "{int x; x = 1; if ( 2 > 3) {int x; x = 2; print x;}; print x;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests2() throws Exception {
			String prog = "prog";
			String input = prog + " {int x; x = 1; if ( 2 < 3) {int x; x = 2; print x;}; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		// passed now
		@Test
		public void p6evaluationFailedTests3() throws Exception {
			String prog = "prog";
			String input = prog + " {print 9 ** 4;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;6561;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		//passed now - throws SemanticException
		@Test
		public void p6evaluationFailedTests4() throws Exception {
			thrown.expect(SemanticException.class);
			String prog = "prog";
			String input = prog + " { int a; a = 2 < 3 ? 1.0 : 0; }";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests5() throws Exception {
			String prog = "prog";
			String input = prog + " {int x = 4; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests5_2() throws Exception {
			String prog = "prog";
			String input = prog + " {int x; x = 4; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests5_3_float() throws Exception {
			String prog = "prog";
			String input = prog + " {float x = 4.0; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests6() throws Exception {
			String prog = "prog";
			String input = prog + " {string s1 = \"abc\"; string s2 = \"def\"; print s1+s2;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;abcdef;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests7() throws Exception {
			String prog = "prog";
			String input = prog + " {string x; x = \"abcc\"; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;abcc;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests8() throws Exception {
			String prog = "prog";
			String input = prog + " {int x; x = 0; while ( x <4 ) {char a; a = 'a'; print a; x = x + 1;}; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;a;a;a;a;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests9() throws Exception {
			String prog = "prog";
			String input = prog + " {char x; x = 'a'; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;a;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests10() throws Exception {
			String prog = "prog";
			String input = prog + " {float x; float y; x = 2.1; y = 3.2; print x; print y;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.1;3.2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void p6evaluationFailedTests11() throws Exception {
			String prog = "prog";
			String input = prog + " {float x, y; x = 2.1; y = 3.2; print x; print y;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.1;3.2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void variableListDeclaration12() throws Exception {
			String prog = "prog";
			String input = prog + " {float a = 1.0; float x, y; float b; x = 2.1; b = 5.5; y = 3.2; print x; print a; print b; print y;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.1;1.0;5.5;3.2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void printstrconcat() throws Exception {
			String prog = "prog";
			String input = prog + "{string s1; string s2; string s3; "
								+ "s1 = \"abc\";s2 = \"def\";"
								+ "print s1+s2;"
								+ "s3 = \"ghi\"; "
								+ "print(s3+s1+s2);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;abcdef;ghiabcdef;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testListDeclaration2() throws Exception {
			String prog = "listdec";
			String input = prog + "{int i, j, b; i=3; j=4; b=5; if(true){ float i=2.0; print i; print j;}; print i; print b;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.0;4;3;5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testListDeclaration3() throws Exception {
			String prog = "listdec";
			String input = prog + "{string i, j, b; i=\"cat\"; j=\"dog\"; b=i+j; if(true){ float i=2.0; print i; print j;}; print i; print b;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.0;dog;cat;catdog;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
}

